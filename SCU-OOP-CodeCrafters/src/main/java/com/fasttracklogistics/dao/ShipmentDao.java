package com.fasttracklogistics.dao;

import com.fasttracklogistics.config.DbConnection;
import com.fasttracklogistics.models.Shipment;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**

 DAO for managing shipments in the database.
 */
public class ShipmentDao {

    /**

     Fetches all shipments from the database.
     */
    public List<Shipment> getAllShipments() {
        List<Shipment> shipments = new ArrayList<>();
        String sql = "SELECT * FROM shipments";

        try (Connection conn = DbConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                Shipment shipment = new Shipment(
                        String.valueOf(rs.getInt("shipment_id")), // converting int ID to String
                        rs.getString("sender"),
                        rs.getString("receiver"),
                        rs.getString("contents"),
                        rs.getString("status")
                );
                shipments.add(shipment);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return shipments;
    }

    /**

     Inserts a new shipment into the database.

     ID is auto-generated by the database.
     */
    public void addShipment(Shipment s) {
        String sql = "INSERT INTO shipments (sender, receiver, contents, status) VALUES (?, ?, ?, ?)";

        try (Connection conn = DbConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, s.getSender());
            stmt.setString(2, s.getReceiver());
            stmt.setString(3, s.getContents());
            stmt.setString(4, s.getStatus());

            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**

     Updates an existing shipment by its ID.
     */
    public void updateShipment(Shipment s) {
        String sql = "UPDATE shipments SET sender=?, receiver=?, contents=?, status=? WHERE shipment_id=?";

        try (Connection conn = DbConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, s.getSender());
            stmt.setString(2, s.getReceiver());
            stmt.setString(3, s.getContents());
            stmt.setString(4, s.getStatus());
            stmt.setInt(5, Integer.parseInt(s.getId())); // Convert ID back to int

            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**

     Deletes a shipment by its ID.
     */
    public void deleteShipment(String shipmentId) {
        String sql = "DELETE FROM shipments WHERE shipment_id=?";

        try (Connection conn = DbConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, Integer.parseInt(shipmentId)); // Convert ID to int
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}